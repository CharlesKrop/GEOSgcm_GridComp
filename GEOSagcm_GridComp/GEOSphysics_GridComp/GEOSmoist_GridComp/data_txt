aer_actv_single_moment.F90:      data cof,stp/76.18009172947146d0,-86.50532032941677d0,         &
aer_cloud.F90:      data amw_par     /18d-3/                   ! water molecular weight
aer_cloud.F90:      data ama_par     /29d-3/                   ! air molecular weight
aer_cloud.F90:      data grav_par    /9.81d0/                  ! g constant
aer_cloud.F90:      data rgas_par    /8.31d0/                  ! universal gas constant
aer_cloud.F90:      !data accom_par /0.042d0/                     ! default accommodation coef
aer_cloud.F90:      data accom_par /1.0d0/                     ! default accommodation coef
aer_cloud.F90:      data maxit_par   /100/                     ! max iterations for solution
aer_cloud.F90:      data eps_par     /1d-6/                    ! convergence criterion
aer_cloud.F90:      data pi_par      /3.1415927d0/             ! some constants
aer_cloud.F90:      data zero_par    /1.0e-20/
aer_cloud.F90:      data great_par   /1d20/
aer_cloud.F90:      data sq2pi_par   /2.5066282746d0/ 
aer_cloud.F90:      data sq2_par   /1.41421356237d0/ 
aer_cloud.F90:      data a/6.107799610e+0, 4.436518521e-1, 1.428945805e-2, & 
aer_cloud.F90:      data cof,stp/76.18009173d0,-86.50532033d0,24.01409822d0,  & 
aer_cloud.F90:      data half,one,fpf/0.5d0,1.0d0,5.5d0/
cldwat2m_micro.F90:            ! formula approximated from data of Matrasov (2007)
cldwat2m_micro.F90:            data (a(i), i = 0, 12) / & 
cldwat2m_micro.F90:            data (a(i), i = 13, 25) / &
cldwat2m_micro.F90:            data (a(i), i = 26, 38) / &
cldwat2m_micro.F90:            data (a(i), i = 39, 51) / &
cldwat2m_micro.F90:            data (a(i), i = 52, 64) / &
cldwat2m_micro.F90:            data (b(i), i = 0, 12) / &
cldwat2m_micro.F90:            data (b(i), i = 13, 25) / &
cldwat2m_micro.F90:            data (b(i), i = 26, 38) / &
cldwat2m_micro.F90:            data (b(i), i = 39, 51) / &
cldwat2m_micro.F90:            data (b(i), i = 52, 64) / &
ConvPar_GF_GEOS5.F90:    !-----------local var in GEOS-5 data structure
ConvPar_GF_GEOS5.F90:    !- 2-d input data
ConvPar_GF_GEOS5.F90:    !- 3-d input data
ConvPar_GF_GEOS5.F90:                     ,TRACER      & !- note: uses GEOS-5 data structure
ConvPar_GF_GEOS5.F90:              ,TRACER                &!-note: uses GEOS-5 data structure
ConvPar_GF_GEOS5.F90:   !-***** TRACER has different data structure   (i,j,k,ispc) *********
ConvPar_GF_GEOS5.F90:   !-***** rchemcuten uses the GF data structure (ispc,k,i,j) *********
ConvPar_GF_GEOS5.F90:                  !- input data
ConvPar_GF_GEOS5.F90:                  !output data
ConvPar_GF_GEOS5.F90:                     !input data
ConvPar_GF_GEOS5.F90:                     !output data
ConvPar_GF_GEOS5.F90:  data  (x_alpha(k),k=1,30)/                                    & 
ConvPar_GF_GEOS5.F90:  data (g_alpha(k),k=1,30)/                                         &
ConvPar_GF_GEOS5.F90:    ! xi()  - the arrays of data abscissas
ConvPar_GF_GEOS5.F90:    ! yi()  - the arrays of data ordinates
ConvPar_GF_GEOS5.F90:	IF(trim(rundata)=="NONE") THEN
ConvPar_GF_GEOS5.F90:	 open(15, file="dataLXXX.dat_"//trim(cumulus),status='unknown',position="APPEND")
ConvPar_GF_GEOS5.F90:	    open(15, file=trim(rundata),status='old')
ConvPar_GF_GEOS5.F90:   data iv /ntab*0/, iy /0/
GEOS_MoistGridComp.F90:       ! IF(ADJUSTL(AERO_PROVIDER) == 'GOCART.data' .AND. USE_TRACER_TRANSP == 1) THEN
GEOS_MoistGridComp.F90:       !    call WRITE_PARALLEL ("AERO_PROVIDER: GOCART.data detected, disabling tracer transport for GF")
GEOS_MoistGridComp.F90:       ! IF(ADJUSTL(AERO_PROVIDER) == 'GOCART.data' .AND. USE_TRACER_SCAVEN == 1) THEN
GEOS_MoistGridComp.F90:       !    call WRITE_PARALLEL ("AERO_PROVIDER: GOCART.data detected, disabling scavenging for GF")
GEOS_MoistGridComp.F90:    !IF(ADJUSTL(AERO_PROVIDER) == 'GOCART.data' .AND. USE_TRACER_TRANSP_UW == 1) THEN
GEOS_MoistGridComp.F90:    !       call WRITE_PARALLEL ("AERO_PROVIDER: GOCART.data detected, disabling tracer transport for UW")
GEOS_MoistGridComp.F90:         !Grid average  volumetric  radius for comparison against field data
gfdl_cloud_microphys.F90:    ! use diag_manager_mod, only: register_diag_field, send_data
gfdl_cloud_microphys.F90:    ! used = send_data (id_vtr, vt_r, time, is_in = iis, js_in = jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_vts, vt_s, time, is_in = iis, js_in = jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_vtg, vt_g, time, is_in = iis, js_in = jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_vti, vt_i, time, is_in = iis, js_in = jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_droplets, qn2, time, is_in = iis, js_in = jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_var, w_var, time, is_in = iis, js_in = jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_cond, cond, time, is_in = iis, js_in = jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_snow, snow, time, iis, jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_snow, snow, time, is_in = iis, js_in = jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_graupel, graupel, time, iis, jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_graupel, graupel, time, is_in = iis, js_in = jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_ice, ice, time, iis, jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_ice, ice, time, is_in = iis, js_in = jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_rain, rain, time, iis, jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_rain, rain, time, is_in = iis, js_in = jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_rh, rh0, time, iis, jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_rh, rh0, time, is_in = iis, js_in = jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_prec, prec_mp, time, iis, jjs)
gfdl_cloud_microphys.F90:    ! used = send_data (id_prec, prec_mp, time, is_in = iis, js_in = jjs)
isccp_call.code:        unit=GETFILE( "Cloud_ISCCP.data", form="unformatted", RC=STATUS);VERIFY_(STATUS)
micro_mg3_0.F90:        ! formula approximated from data of Matrasov (2007)
micro_mg3_0.F90:  integer, intent(in) :: ncol      ! Number of columns with meaningful data
module_gate.F90:  !- Here are the place for data related with the GATE soundings
module_gate.F90:  character (len=128) :: runname, runlabel,rundata="NONE" 
rascnvv2_v.F90:      data first/.true./
wv_saturation.F90:  !  data t0inv/0.003663/
